###############################################################################
# DEFINITIONS......................................helper function definitions
# PROMPT........................................................prompt settings
# ENV_SETTINGS........................................settings for the bash env
# TOOL_SETTINGS...............................................settings for tools
# SETTINGS...................................settings for commands/applications
# ALIASES..........................................anything but aliases go here
# PATHS........................................................path var setters
# EXTRA SOURCES....................................load additional source files
###############################################################################

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

###############################################################################
# $DEFINITIONS
###############################################################################

#=== FUNCTION =================================================================
#        NAME: source?
# DESCRIPTION: loads a file if it exists
# PARAMETER 1: file
#==============================================================================
function source? {
    [ -f $1 ] && source $1
}

#=== FUNCTION =================================================================
#        NAME: path!
# DESCRIPTION: adds a path to the $PATH variable
# PARAMETER 1: dir
#==============================================================================
function path! {
    [ -d $1 ] && export PATH="$PATH:$1"
}

#=== FUNCTION =================================================================
#        NAME: dbash
# DESCRIPTION: starts a bash terminal in the given docker container
# PARAMETER 1: container name
#==============================================================================
function dbash {
    if [ "$1" = "iswsi" ]; then
        project="docker-environment_iswebserviceintegration_1"
    elif [ "$1" = "commsworkers" ]; then
        project="docker-environment_commsworkers_1"
    else
        project="$1"
    fi
    docker exec -it $project /bin/bash
}

###############################################################################
# $PROMPT
###############################################################################

# Gets the number of jobs
ps1_jobscount() {
    local stopped=$(jobs -sp | wc -l | sed 's/ //g')
    # local running=$(jobs -rp | wc -l | sed 's/ //g')
    # ((running+stopped)) && echo -n "(${running}r/${stopped}s) "
    ((stopped)) && echo -n "*"
}

# Gets the exit code of the last command
ps1_exit_code() {
    local last_exit="$?"

    # 0   ok
    # 130 manually cancelled (ctrl-c)
    # 146 sent process to background
    # 146 (git?) less exit
    if [ "$last_exit" -eq 0 ] || [ "$last_exit" -eq 146 ] || [ "$last_exit" -eq 141 ] || [ "$last_exit" -eq 130 ]; then
        # echo "ðŸ‘¾ "
        return
    else
        echo "ðŸ˜¡  "
    fi
}

# Gets the current checked-out git branch
ps1_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

distro=$(sed -n "/^ID=/s/ID=//p" /etc/os-release)
if [ "$distro" = "ubuntu" ]; then
    PS1="\[\033[38;5;129m\]\u@\h \[\033[32m\]\w\[\033[33m\]\$(ps1_git_branch)\[\033[00m\]\[\e[36m\]\$(ps1_jobscount)\[\e[m\]$ "
else
    PS1="\[\e[36m\]\u@\h \[\e[m\]\w\[\033[33m\]\$(ps1_git_branch)\[\033[00m\]\[\e[36m\]\$(ps1_jobscount)\[\e[m\]$ "
fi

###############################################################################
# $ENV_SETTINGS
###############################################################################

EDITOR=vim

WORKSPACE="$HOME/dev"
#WORKSPACE="/var/www"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=-1

# colored output on mac
export CLICOLOR=1
# http://geoff.greer.fm/lscolors/
# export LSCOLORS='exfxcxdxbxegedabagacad'
# export LS_COLORS='di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'
export LSCOLORS=axBxhxDxfxhxhxhxhxcxcx
export LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=93:*.rpm=90'

###############################################################################
# $TOOL_SETTINGS
###############################################################################

export GOPATH=$HOME/go
# export GOROOT=/usr/local/opt/go/libexec

export VAGRANT_DEFAULT_PROVIDER=virtualbox

###############################################################################
# $SETTINGS
###############################################################################

# vi mode
set -o vi

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep -I --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

###############################################################################
# $ALIASES
###############################################################################

# some more ls aliases
alias ll='ls -alF --group-directories-first --color=auto'
alias la='ls -hA  --group-directories-first --color=auto'

alias ..='cd ..'
alias cd..='cd ..'

# sort in ASCII order (upper-case before lower-case)
alias asciisort='LC_COLLATE=C sort'

# Check disk usage
alias disk_search='du -hsx * | sort -rh | head -10'

alias fagent='eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa'

# git aliases
# alias checkout='TODO git_fancy_fuzzy_checkout'

alias proj="cd $WORKSPACE"
alias sta="cd $WORKSPACE/sales-team-automation"
alias comms="cd $WORKSPACE/iswebserviceintegration/ext/is/communications-domain"
alias commsi="cd $WORKSPACE/iswebserviceintegration/ext/is/communications"
alias iswsi="cd $WORKSPACE/iswebserviceintegration"
alias cas="cd $WORKSPACE/central-admin-service"
alias lmp="cd $WORKSPACE/iswebserviceintegration/ext/is/lmp-domain"
alias nex="cd $WORKSPACE/iswebserviceintegration/ext/is/nexusdomain"
alias work="cd $WORKSPACE/commsworkers"

alias clearlogs='echo '' | tee /var/log/apache2/nexus.log /var/log/cli_php_errors.log /var/log/apache2/php_errors.log'

alias startvm='VBoxManage startvm "stavagrant_default_1531775685055_97439" --type headless'
alias startvm2='VBoxManage startvm "stavagrant2_default_1533596444526_15497" --type headless'
alias startcomms="cd $WORKSPACE/docker-environment && docker-compose up --detach"
alias systemup="cd $WORKSPACE && vagrant up && pm2 start gatling.json"
#docker run -p 4000:80 -e PHPRC="/usr/local/etc/php/php.development.ini" -it -v /home/mstyles/data/recordings:/home/comms_recordings -d --mount type=bind,source=/home/mstyles/projects/iswebserviceintegration,target=/var/www/html --name iswsi iswsi
#docker run -p 4003:80 -it -d --mount type=bind,source=/home/mstyles/projects/iswebserviceintegration,target=/var/www/html --name test-iswsi test-iswsi
#docker run -p 4001:80 -it -d --mount type=bind,source=/home/mstyles/projects/commsadmin,target=/var/www/html --name commsadmin commsadmin
#docker run -p 4002:80 -it -d --mount type=bind,source=/home/mstyles/projects/audio-converter,target=/var/www/audio-converter --name audio-converter audio-converter
#docker run -p 4004:80 -e PHPRC="/usr/local/etc/php/php.development.ini" -it -d --mount type=bind,source=/home/mstyles/projects/central-admin-service,target=/var/www/html --name cas cas
#docker run -p 4005:80 -it -d --mount type=bind,source=/home/mstyles/projects/time-zone-phone-numbers,target=/src --name tzpn tzpn
#docker run --name db -p 3306:3306 -e MYSQL_ROOT_PASSWORD=d3v3nv -d mysql:5.6
#docker run -d --hostname my-rabbit --name mq -p 5672:5672 -p 15672:15672 rabbitmq:3.6.5-management
#docker run --name memcache -p 11211:11211 -d memcached:latest
#docker exec -it commsworkers /bin/bash restartworkers.sh
#docker cp ext/is/communications/src/telephony/platforms/asterisk/dialplans/dialer_core.conf asterisk:/etc/asterisk/dialer_core.conf
#docker cp ext/is/communications/src/telephony/platforms/asterisk/dialplans/route_inbound.conf asterisk:/etc/asterisk/route_inbound.conf

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i \
    "$([ $? = 0 ] && echo terminal || echo error)" \
    "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias nrpe_check="sudo grep '^command\[' /etc/nagios/nrpe_local*.cfg | cut -d'=' -f2- | xargs -L1 -d '\n' sudo su root -c"

#azure stuff
# az login
# az account list
# az account set --subscription eus-s01
# az account show
# az keyvault secret -h
# az aks get-credentials --resource-group eus-s01-all-aks --name eus-s01-all-aks
# kubectl cluster-info
# kubectl -n cp get pods
# kubectl -n cp exec commsadmin-7777db579d-bnblh -i -t bash
# kubectl get secrets -n cp

###############################################################################
# $PATHS
###############################################################################

path! $HOME/.composer/vendor/bin
path! $HOME/bin/
path! $HOME/.dots/bin
path! $HOME/.local/bin
path! /var/lib/bento4/bin
path! $GOPATH/bin/

###############################################################################
# $EXTRA SOURCES
###############################################################################

source? $HOME/.bashrc_local

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
. "$HOME/.cargo/env"

. "$HOME/.atuin/bin/env"

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
eval "$(atuin init bash)"
