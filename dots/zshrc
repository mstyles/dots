# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    # git
    # zsh-nvm
    vi-mode
)

source $ZSH/oh-my-zsh.sh

# User configuration

export WORKSPACE="$HOME/dev/lendio-infra/repositories"
export EDITOR=nvim
export COMPOSER_MEMORY_LIMIT=5G
export PATH="/usr/local/opt/mysql-client@5.7/bin:$PATH"

export NOVA_USERNAME=developers@lendio.com
export NOVA_PASSWORD=$(cat ~/dev/docker-secrets/nova-password)

fpath=($HOME/.dots/dots/zsh $fpath)

# Sunrise ECS-CLI config
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go # default directory
export PATH=$GOPATH/bin:$PATH
# deploy user
export ECS_CLI_AWS_REGION="us-east-1"
export ECS_CLI_AWS_SECRET=$(cat ~/dev/docker-secrets/ecs-cli-aws-secret)
export ECS_CLI_AWS_KEY=$(cat ~/dev/docker-secrets/ecs-cli-aws-key)
export CIRCLE_API_USER_TOKEN=$(cat ~/dev/docker-secrets/circle-api-user-token)

# export MANPAGER='nvim +Man!'

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias vim="nvim"
alias dots="cd ~/.dots"

alias ll="ls -hal"
alias fagent='eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa'

# sort in ASCII order (upper-case before lower-case)
alias asciisort='LC_COLLATE=C sort'

# print out $PATH line by line
alias print_path="echo $PATH | tr : '\n'"

alias uuid="curl https://www.uuidgenerator.net/api/version4; echo"

alias api="cd $WORKSPACE/api"
alias pp="cd $WORKSPACE/partner-portal"
alias pipe="cd $WORKSPACE/pipeline"
alias bp="cd $WORKSPACE/borrower-portal"
alias bpapi="cd $WORKSPACE/bp-api"
alias hp="cd $WORKSPACE/home-portal"
alias fin="cd $WORKSPACE/financial-integration-service"
alias biz="cd $WORKSPACE/business-service"
alias bnk="cd $WORKSPACE/bank-service"
alias karen="cd $WORKSPACE/karen"
alias infra="cd $HOME/dev/lendio-infra"
alias binfra="cd $HOME/dev/billy-infra"
alias bnkb="cd $HOME/dev/billy-infra/repositories/bank-service"
alias bapi="cd $HOME/dev/billy-infra/repositories/billy-api"

alias dc="docker compose"
alias docker-api="docker exec -it lendio-infra-api-1 sh"
alias docker-worker="docker exec -it lendio-infra-api-worker_1 /bin/bash"
alias docker-pp="docker exec -it lendio-infra-partner-portal_1 /bin/bash"
alias docker-pipe="docker exec -it lendio-infra-pipeline_1 /bin/bash"
alias docker-bp="docker exec -it lendio-infra-borrower-portal_1 /bin/bash"
alias docker-hp="docker exec -it lendio-infra-robot-unicorn_1 /bin/bash"
alias docker-stop="docker stop \$(docker ps -aq)"
alias docker-start="cd $WORKSPACE && docker compose up -d api && cd -"
alias docker-start-full="cd $WORKSPACE && docker compose up -d && cd -"

alias wrestart="docker exec lendio-infra-api-worker-1 pkill -9 -f artisan"

# Bring all windows of the given proc to the front (e.g. "showall xterm")
function showall {
  pids=" $(pidof $1) "
  wmctrl -lp | while read id a pid b
  do test "${pids/ $pid }" != "$pids" && wmctrl -i -a $id; done
}

# Decodes the given JWT
function jwt-decode(){
    jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}

function checkin(){
  curl --location '{webhook-url}' \
    --header 'Content-Type: application/json' \
    --data-raw "{ \"what\": \"$1\", \"who\": \"matt.styles@lendio.com\" }"
}

# Docker PS Prettify Function
function dock() {
  if [[ "$@" == "ps" ]]; then
    command docker ps --format 'table {{.Names}}\t{{.Status}} : {{.RunningFor}}\t{{.Ports}}'
  elif [[ "$@" == "psa" ]]; then
    # docker ps -a includes all containers
    command docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Size}}\n{{.ID}}\t{{.Image}}{{if .Ports}}{{with $p := split .Ports ", "}}\t{{len $p}} port(s) on {{end}}{{- .Networks}}{{else}}\tNo Ports on {{ .Networks }}{{end}}\n'
  elif [[ "$@" == "psnet" ]]; then
    # docker ps with network information
    command docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Networks}}\n{{.ID}}{{if .Ports}}{{with $p := split .Ports ", "}}{{range $p}}\t\t{{println .}}{{end}}{{end}}{{else}}\t\t{{println "No Ports"}}{{end}}'
  else
    command docker "$@"
  fi
}

##### Kubernetes stuffs ####
# saml2aws login -a lendio_corp
#
# aws eks --region us-east-1 update-kubeconfig --name sandbox-corp --profile saml
# kubectl exec -it deploy/api -- sh
#
# aws eks --region us-east-1 update-kubeconfig --name production-corp --profile saml
# kubectl exec -it deploy/api -n lender-sandbox -- sh
#
# Tinker on Prod
# kubectl exec -it deploy/api-rabbit-jobs -- php artisan tinker
#
# Pipe a script to Prod Tinker
# more matt_test_matches.php | kubectl exec -it deploy/api-web -- php artisan tinker

function sencrypt () {
    echo "Let's encrypt..."
    encrypted=$(ssh salt-master-1.$1.corp.lendio.net "echo -n \"$2\" > /tmp/sencrypt && sudo salt-call datakey.encrypt /tmp/sencrypt file=true" | tr -d '\n')
    ssh salt-master-1.$1.corp.lendio.net "rm /tmp/sencrypt && sudo salt-call datakey.decrypt s=\"$encrypted\""
    echo -n "$encrypted"
    # echo -n "$encrypted" | pbcopy
    # echo "Result copied to clipboard."
}
function sdecrypt () {
    echo "Decrypting..."
    if [[ -z "$1" || -z "$2" ]]
    then
        echo "Please provide the required arguments."
        echo -e "\nUsage: $0 <environment> <valueToEncrypt> \n"
        exit
    fi
    ssh salt-master-1.$1.corp.lendio.net "sudo salt-call datakey.decrypt s=\"$2\""
}

function ksecret () { # Return list of base64 decrypted secrets for the given pod/service
  kubectl get secrets/$1 -o json | jq '.data | map_values(@base64d)'
}

function start-wireguard {
    for i in `ls /etc/wireguard | grep conf | sed 's/.conf//g'`; do
      sudo wg-quick up $i;
    done
}
function restart-wireguard {
    for i in `ls /etc/wireguard | grep conf | sed 's/.conf//g'`; do
      sudo wg-quick down $i;
      sudo wg-quick up $i;
    done
}
function stop-wireguard {
    for i in `ls /etc/wireguard | grep conf | sed 's/.conf//g'`; do
      sudo wg-quick down $i;
    done
}
##### END Kubernetes stuffs ####

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export GITHUB_TOKEN=$(cat ~/dev/docker-secrets/docker-git-token)

export OAUTH_PRIVATE=$(cat ~/dev/docker-secrets/api-oauth-private.key)
export OAUTH_PUBLIC=$(cat ~/dev/docker-secrets/api-oauth-public.key)

# Weird env var throwing error in unit tests when run from host unless defined
export LENDIO_TENANT_ID=1

export NPM_TOKEN=$(cat ~/dev/docker-secrets/npm-token)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
